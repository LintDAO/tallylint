type AddRecordCommand = record {
  to : text;
  fee : float64;
  tag : text;
  status : text;
  cost : float64;
  from : text;
  hash : text;
  memo : text;
  time : nat64;
  t_type : text;
  coin_type : text;
  comment : text;
  income : float64;
  address : text;
  profit : float64;
  manual : bool;
  principal_id : opt text;
  price : float64;
  amount : nat32;
};
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId };
type Currency = record { decimals : nat64; symbol : text };
type CustomResult1 = variant { Ok : NeuronInfo; Err : GovernanceError };
type Details = record {
  to : text;
  fee : float64;
  status : text;
  ledgerCanisterId : text;
  value : float64;
  cost : float64;
  from : text;
  currency : Currency;
  profit : float64;
  price : float64;
  amount : float64;
};
type EditHistoryCommand = record {
  id : nat64;
  to : text;
  fee : float64;
  tag : text;
  status : text;
  cost : float64;
  from : text;
  hash : text;
  memo : text;
  time : nat64;
  t_type : text;
  coin_type : text;
  comment : text;
  income : float64;
  address : text;
  profit : float64;
  manual : bool;
  principal_id : opt text;
  price : float64;
  amount : nat32;
};
type GovernanceError = record { error_message : text; error_type : int32 };
type HistoryQueryCommand = record {
  tag : text;
  from_time : nat64;
  to_time : nat64;
  t_type : text;
  sort_method : text;
  address : opt text;
};
type HttpFailureReason = variant { ProxyError : text; RequestTimeout };
type HttpHeader = record { value : text; name : text };
type HttpMethod = variant { GET; PUT; DELETE; HEAD; POST };
type HttpOverWsError = variant {
  NotHttpOverWsType : text;
  ProxyNotFound;
  NotYetReceived;
  ConnectionNotAssignedToProxy;
  RequestIdNotFound;
  NoProxiesConnected;
  InvalidHttpMessage;
  RequestFailed : HttpFailureReason;
};
type HttpRequest = record {
  url : text;
  method : HttpMethod;
  body : opt vec nat8;
  headers : vec HttpHeader;
};
type HttpResponse = record {
  status : nat;
  body : vec nat8;
  headers : vec HttpHeader;
};
type HttpResult = variant {
  Success : HttpResponse;
  Failure : HttpFailureReason;
};
type InvalidRequest = variant {
  TooManyHeaders;
  InvalidTimeout;
  InvalidUrl : text;
};
type KnownNeuronData = record { name : text; description : opt text };
type NeuronAddCommand = record { from : text; name : text; address : text };
type NeuronId = record { id : vec nat8 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type NeuronProfile = record {
  id : nat64;
  owner : principal;
  name : text;
  update_time : nat64;
  create_time : nat64;
  address : text;
};
type NeuronUpdateCommand = record { id : nat64; name : text };
type ProxyCanisterError = variant {
  HttpOverWs : HttpOverWsError;
  InvalidRequest : InvalidRequest;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : bool; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Result_2 = variant { Ok : UserProfile; Err : text };
type Result_3 = variant {
  Ok : record { CustomResult1 };
  Err : record { RejectionCode; text };
};
type Result_4 = variant { Ok : nat64; Err : ProxyCanisterError };
type Result_5 = variant { Ok : NeuronProfile; Err : text };
type Result_6 = variant { Ok : WalletProfile; Err : text };
type Result_7 = variant { Ok : vec NeuronProfile; Err : vec NeuronProfile };
type Result_8 = variant { Ok : vec WalletProfile; Err : vec WalletProfile };
type Result_9 = variant {
  Ok : vec record { text; vec TransactionB };
  Err : text;
};
type TransactionB = record {
  id : nat64;
  to : text;
  fee : float64;
  tag : text;
  status : text;
  cost : float64;
  from : text;
  hash : text;
  memo : text;
  t_type : text;
  coin_type : text;
  comment : text;
  income : float64;
  address : text;
  timestamp : nat64;
  profit : float64;
  manual : bool;
  principal_id : opt text;
  price : float64;
  amount : nat32;
};
type TransactionF = record {
  hash : text;
  walletName : text;
  t_type : text;
  timestamp : nat64;
  details : Details;
};
type TransformArgs = record { context : vec nat8; response : HttpResponse };
type UserProfile = record {
  owner : principal;
  name : text;
  create_time : nat64;
};
type WalletAddCommand = record {
  from : text;
  name : text;
  address : text;
  principal_id : opt text;
};
type WalletProfile = record {
  id : nat64;
  last_transaction_time : nat64;
  last_sync_time : nat64;
  from : text;
  name : text;
  create_time : nat64;
  address : text;
  principal_id : opt text;
  holder : principal;
  transactions : nat64;
};
type WalletUpdateCommand = record { id : nat64; from : text; name : text };
service : {
  add_neuron_wallet : (NeuronAddCommand) -> (Result);
  add_transaction_record : (AddRecordCommand) -> (Result_1);
  add_wallet : (WalletAddCommand) -> (Result);
  auto_register_user : () -> (Result_2);
  clean_db : () -> (text);
  collect_running_payload : () -> (text) query;
  delete_neuron_wallet : (nat64) -> (Result);
  delete_transaction_record : (nat64) -> (Result_1);
  delete_wallet : (nat64) -> (Result);
  do_pre_upgrade_and_print_db : () -> (text) query;
  edit_transaction_record : (EditHistoryCommand) -> (Result);
  get_balance : () -> (nat64);
  get_http_result_by_id : (nat64) -> (opt HttpResult) query;
  get_http_results : () -> (vec record { nat64; HttpResult }) query;
  get_icp_usd_exchange : () -> (text);
  get_neuron_info : (nat64) -> (Result_3);
  get_payload_from_dropbox : (text, text) -> (text);
  get_payload_from_stable_mem : () -> (text) query;
  get_payload_from_stable_mem_simple : () -> (text) query;
  http_request_via_proxy : (HttpRequest, opt nat64, bool) -> (Result_4);
  http_response_callback : (nat64, HttpResult) -> ();
  list_all_user : () -> (vec UserProfile);
  query_a_neuron_wallet : (nat64) -> (Result_5) query;
  query_a_wallet : (nat64) -> (Result_6) query;
  query_all_neuron_wallet : () -> (Result_7) query;
  query_all_wallets : () -> (Result_8) query;
  save_payload_to_dropbox : (text, nat32) -> (text);
  save_payload_to_dropbox_blocking : () -> (text);
  set_payload_using_dropbox : (text, text) -> (bool);
  set_payload_using_stable_mem : () -> ();
  set_stable_mem_use_payload : () -> ();
  set_stable_mem_use_payload_simple : () -> ();
  store_paylaod_to_dropbox : () -> (text);
  sync_transaction_record : (vec record { nat64; vec TransactionF }) -> (
      Result,
    );
  transform : (TransformArgs) -> (HttpResponse) query;
  update_neuron_wallet : (NeuronUpdateCommand) -> (Result);
  update_wallet : (WalletUpdateCommand) -> (Result);
  user_quantity : () -> (nat32);
  wallet_history : (HistoryQueryCommand) -> (Result_9) query;
}