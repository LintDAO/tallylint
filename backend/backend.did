type AddRecordCommand = record {
  tag : text;
  time : nat64;
  t_type : text;
  comment : text;
  address : text;
  manual : bool;
  price : float64;
  amount : nat32;
};
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId };
type CanisterChange = record {
  timestamp_nanos : nat64;
  canister_version : nat64;
  origin : CanisterChangeOrigin;
  details : CanisterChangeDetails;
};
type CanisterChangeDetails = variant {
  creation : CreationRecord;
  code_deployment : CodeDeploymentRecord;
  controllers_change : CreationRecord;
  code_uninstall;
};
type CanisterChangeOrigin = variant {
  from_user : FromUserRecord;
  from_canister : FromCanisterRecord;
};
type CanisterInfoResponse = record {
  controllers : vec principal;
  module_hash : opt vec nat8;
  recent_changes : vec CanisterChange;
  total_num_changes : nat64;
};
type CanisterInstallMode = variant { reinstall; upgrade; install };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  idle_cycles_burned_per_day : nat;
  module_hash : opt vec nat8;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CodeDeploymentRecord = record {
  mode : CanisterInstallMode;
  module_hash : vec nat8;
};
type CreationRecord = record { controllers : vec principal };
type CustomResult1 = variant { Ok : NeuronInfo; Err : GovernanceError };
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  memory_allocation : nat;
  compute_allocation : nat;
};
type EditHistoryCommand = record {
  id : nat64;
  tag : text;
  time : nat64;
  t_type : text;
  comment : text;
  manual : bool;
  price : float64;
  amount : nat32;
};
type FromCanisterRecord = record {
  canister_version : opt nat64;
  canister_id : principal;
};
type FromUserRecord = record { user_id : principal };
type GovernanceError = record { error_message : text; error_type : int32 };
type HistoryQueryCommand = record {
  to : nat64;
  tag : text;
  from : nat64;
  t_type : text;
  sort_method : text;
  address : text;
};
type KnownNeuronData = record { name : text; description : opt text };
type NeuronId = record { id : vec nat8 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type RecordProfile = record {
  id : nat64;
  tag : text;
  time : nat64;
  t_type : text;
  comment : text;
  address : text;
  manual : bool;
  price : float64;
  opt_principal : opt principal;
  amount : nat32;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : nat64; Err : text };
type Result_1 = variant { Ok : bool; Err : text };
type Result_2 = variant { Ok : UserProfile; Err : text };
type Result_3 = variant {
  Ok : record { CustomResult1 };
  Err : record { RejectionCode; text };
};
type Result_4 = variant { Ok : WalletProfile; Err : text };
type Result_5 = variant { Ok : vec WalletProfile; Err : vec WalletProfile };
type Result_6 = variant {
  Ok : vec record { text; vec RecordProfile };
  Err : text;
};
type UserProfile = record {
  owner : principal;
  name : text;
  create_time : nat64;
};
type WalletAddCommand = record {
  from : text;
  name : text;
  address : text;
  opt_principle : opt principal;
};
type WalletProfile = record {
  id : nat64;
  last_transaction_time : nat64;
  last_sync_time : nat64;
  from : text;
  name : text;
  create_time : nat64;
  address : text;
  holder : principal;
  transactions : nat64;
};
type WalletUpdateCommand = record { id : nat64; name : text };
service : () -> {
  add_transaction_record : (AddRecordCommand) -> (Result);
  add_wallet : (WalletAddCommand) -> (Result_1);
  auto_register_user : () -> (Result_2);
  create_and_install : () -> (text);
  delete_transaction_record : (nat64) -> (Result);
  delete_wallet : (nat64) -> (Result_1);
  edit_transaction_record : (EditHistoryCommand) -> (Result_1);
  get_balance : () -> (nat64);
  get_canister_info : (text) -> (CanisterInfoResponse);
  get_canister_status : (text) -> (CanisterStatusResponse);
  get_ledger_id : (principal) -> (nat32) query;
  get_neuron_info : (nat64) -> (Result_3);
  list_all_user : () -> (vec UserProfile);
  query_a_wallet : (nat64) -> (Result_4) query;
  query_all_wallets : () -> (Result_5) query;
  sync_transaction_record : (EditHistoryCommand) -> (Result_1);
  update_wallet : (WalletUpdateCommand) -> (Result_1);
  user_quantity : () -> (nat32);
  wallet_history : (HistoryQueryCommand) -> (Result_6) query;
  whoami : () -> (principal) query;
}
