   Compiling psm v0.1.21
   Compiling stacker v0.1.15
   Compiling gfx_gl v0.1.4
    Checking gfx v0.6.5
error[E0433]: failed to resolve: could not find `Ns` in `registry`
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx_gl-0.1.4/build.rs:16:76
   |
16 | ...                   gl_generator::registry::Ns::Gl,
   |                                               ^^ could not find `Ns` in `registry`

error[E0425]: cannot find function `generate_bindings` in crate `gl_generator`
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx_gl-0.1.4/build.rs:15:19
   |
15 |     gl_generator::generate_bindings(gl_generator::StructGenerator,
   |                   ^^^^^^^^^^^^^^^^^ not found in `gl_generator`

error[E0603]: module `registry` is private
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx_gl-0.1.4/build.rs:16:66
   |
16 | ...                   gl_generator::registry::Ns::Gl,
   |                                     ^^^^^^^^ private module
   |
note: the module `registry` is defined here
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gl_generator-0.14.0/lib.rs:72:1
   |
72 | mod registry;
   | ^^^^^^^^^^^^

Some errors have detailed explanations: E0425, E0433, E0603.
For more information about an error, try `rustc --explain E0425`.
error: could not compile `gfx_gl` (build script) due to 3 previous errors
warning: build failed, waiting for other jobs to finish...
error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/draw.rs:58:19
   |
58 |         use std::{intrinsics, mem};
   |                   ^^^^^^^^^^

error[E0658]: use of unstable library feature 'core_intrinsics': intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/draw.rs:73:19
   |
73 |         use std::{intrinsics, mem};
   |                   ^^^^^^^^^^

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mod.rs:230:74
    |
230 |     fn map_buffer_readable<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::Readable<T, R, Self>;
    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `Readable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:34:53
    |
34  | pub struct Readable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                     ^ required by this bound in `Readable`
help: consider further restricting `Self`
    |
230 |     fn map_buffer_readable<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::Readable<T, R, Self> where Self: Sized;
    |                                                                                                        +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:34:71
    |
34  | pub struct Readable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                        ++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mod.rs:231:74
    |
231 |     fn map_buffer_writable<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::Writable<T, R, Self>;
    |                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `Writable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:62:53
    |
62  | pub struct Writable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                     ^ required by this bound in `Writable`
help: consider further restricting `Self`
    |
231 |     fn map_buffer_writable<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::Writable<T, R, Self> where Self: Sized;
    |                                                                                                        +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:62:71
    |
62  | pub struct Writable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                        ++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mod.rs:232:68
    |
232 |     fn map_buffer_rw<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::RW<T, R, Self>;
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `RW`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:92:47
    |
92  | pub struct RW<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                               ^ required by this bound in `RW`
help: consider further restricting `Self`
    |
232 |     fn map_buffer_rw<T: Copy>(&mut self, &handle::Buffer<R, T>) -> mapping::RW<T, R, Self> where Self: Sized;
    |                                                                                            +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:92:65
    |
92  | pub struct RW<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                  ++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:134:24
    |
134 |                     -> Readable<T, R, Self>;
    |                        ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `Readable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:34:53
    |
34  | pub struct Readable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                     ^ required by this bound in `Readable`
help: consider further restricting `Self`
    |
134 |                     -> Readable<T, R, Self> where Self: Sized;
    |                                             +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
    |
34  | pub struct Readable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                        ++++++++

error[E0277]: the trait bound `Self: Factory<R>` is not satisfied
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:134:24
    |
134 |                     -> Readable<T, R, Self>;
    |                        ^^^^^^^^^^^^^^^^^^^^ the trait `Factory<R>` is not implemented for `Self`
    |
note: required by a bound in `Readable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:34:61
    |
34  | pub struct Readable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                             ^^^^^^^^^^ required by this bound in `Readable`
help: consider further restricting `Self`
    |
134 |                     -> Readable<T, R, Self> where Self: Factory<R>;
    |                                             ++++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:136:24
    |
136 |                     -> Writable<T, R, Self>;
    |                        ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `Writable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:62:53
    |
62  | pub struct Writable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                     ^ required by this bound in `Writable`
help: consider further restricting `Self`
    |
136 |                     -> Writable<T, R, Self> where Self: Sized;
    |                                             +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
    |
62  | pub struct Writable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                        ++++++++

error[E0277]: the trait bound `Self: Factory<R>` is not satisfied
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:136:24
    |
136 |                     -> Writable<T, R, Self>;
    |                        ^^^^^^^^^^^^^^^^^^^^ the trait `Factory<R>` is not implemented for `Self`
    |
note: required by a bound in `Writable`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:62:61
    |
62  | pub struct Writable<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                             ^^^^^^^^^^ required by this bound in `Writable`
help: consider further restricting `Self`
    |
136 |                     -> Writable<T, R, Self> where Self: Factory<R>;
    |                                             ++++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:138:26
    |
138 |                       -> RW<T, R, Self>;
    |                          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
note: required by a bound in `RW`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:92:47
    |
92  | pub struct RW<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                               ^ required by this bound in `RW`
help: consider further restricting `Self`
    |
138 |                       -> RW<T, R, Self> where Self: Sized;
    |                                         +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
    |
92  | pub struct RW<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R> + ?Sized> where
    |                                                                  ++++++++

error[E0277]: the trait bound `Self: Factory<R>` is not satisfied
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:138:26
    |
138 |                       -> RW<T, R, Self>;
    |                          ^^^^^^^^^^^^^^ the trait `Factory<R>` is not implemented for `Self`
    |
note: required by a bound in `RW`
   --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/mapping.rs:92:55
    |
92  | pub struct RW<'a, T: Copy, R: 'a + Resources, F: 'a + Factory<R>> where
    |                                                       ^^^^^^^^^^ required by this bound in `RW`
help: consider further restricting `Self`
    |
138 |                       -> RW<T, R, Self> where Self: Factory<R>;
    |                                         ++++++++++++++++++++++

error[E0277]: the size for values of type `Self` cannot be known at compilation time
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/render/mesh.rs:42:40
   |
42 |     fn generate<R: Resources>(buffer: &handle::Buffer<R, Self>) -> Vec<Attribute<R>>;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
   |
note: required by a bound in `Buffer`
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/handle.rs:43:33
   |
43 | pub struct Buffer<R: Resources, T> {
   |                                 ^ required by this bound in `Buffer`
help: consider further restricting `Self`
   |
42 |     fn generate<R: Resources>(buffer: &handle::Buffer<R, Self>) -> Vec<Attribute<R>> where Self: Sized;
   |                                                                                      +++++++++++++++++
help: consider relaxing the implicit `Sized` restriction
  --> /home/btwl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/gfx-0.6.5/src/device/handle.rs:43:34
   |
43 | pub struct Buffer<R: Resources, T: ?Sized> {
   |                                  ++++++++

Some errors have detailed explanations: E0277, E0658.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `gfx` (lib) due to 12 previous errors
